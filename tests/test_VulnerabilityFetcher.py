#  """
#  __author__ = "Author Name"
#  __copyright__ = "Copyright (c) 2024 Author Name"
#  __credits__ = ["Contributor1", "Contributor2"]
#  __license__ = "MIT License"
#  __version__ = "1.0.0"
#  __maintainer__ = "Author Name"
#  __email__ = "author.email@example.com"
#  __status__ = "Development"
#  """
#
import unittest
import os

from modules.DataHandler import DataHandler
from modules.VulnerabilityFetcher import VulnerabilityFetcher


class TestVulnerabilityFetcher(unittest.TestCase):
    def setUp(self):
        self.fetcher = VulnerabilityFetcher(keyword="test_project", api_key="fake_api_key")
        self.data_control = DataHandler()

    def test_fetch_all(self):
        # Assuming no real API call is made, mock the requests and validate structure
        vulnerabilities = self.fetcher.fetch_all()
        self.assertIsInstance(vulnerabilities, list)
        if vulnerabilities:
            self.assertIn('CVE_ID', vulnerabilities[0])
            self.assertIn('Description', vulnerabilities[0])

    def test_save_to_file(self):
        data = [{"CVE_ID": "CVE-1234-5678", "Description": "Test vulnerability"}]
        self.data_control.save_to_json(keyword="test_project", data=data, process_type="vulnerabilities")
        file_path = os.path.join("test_project", "test_project_vulnerabilities.json")
        self.assertTrue(os.path.exists(file_path))
        os.remove(file_path)
        os.rmdir("test_project")


if __name__ == '__main__':
    unittest.main()
