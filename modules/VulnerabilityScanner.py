"""
 __author__ = "Mohammed Shehab"
 __copyright__ = "Copyright (c) 2024 Mohammed Shehab"
 __credits__ = ["Mohammed Shehab", "Safwan Omari", "Yaser Jararweh"]
 __license__ = "MIT License"
 __version__ = "1.0.0"
 __maintainer__ = "Mohammed Shehab"
 __email__ = "shihab@live.cn"
 __status__ = "Development"
"""

import subprocess
import re


class VulnerabilityScanner:
    def __init__(self, repo_path,  file_ext_to_parse):
        self.repo_path = repo_path
        self.vulnerabilities_info = {}
        self.file_ext_to_parse = file_ext_to_parse
        self._ignore_vulnerabilities = [
                                      'syntaxError', 'legacyUninitvar','legacyUninitMemberVar','legacyUninitdata','legacyUninitUse','legacyUninitUseInFunction',
                                      'uninitvar','uninitMemberVar','uninitdata','uninitUse','uninitUseInFunction',
                                      'missingReturn', 'ssk->sk_protocol',
                                      'HID_INPUT_REPORT', 'toomanyconfigs', 'nullPointerDereference',
                                      'LOWER','va_end_missing']

    def scan_file(self, file_path):
        result = subprocess.run(['cppcheck', '--enable=performance', '--quiet', '--language=c++',
                                 '--report-progress', f"{self.repo_path}/{file_path}"], capture_output=True, text=True)
        output = result.stderr
        issues = re.findall(r'\[(?![0-9]+\])(.*?)\]', output)
        issues = [issue for issue in issues if issue not in self._ignore_vulnerabilities]
        return issues, output

    def process_issue(self, lines_of_code, issue_name):
        regex = fr'\[{issue_name}\][^\n]*\n\s*(.*)'
        match = re.search(regex, lines_of_code)
        if match:
            return match.group(1).strip()
        return ""