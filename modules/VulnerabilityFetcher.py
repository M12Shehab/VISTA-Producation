"""
 __author__ = "Mohammed Shehab"
 __copyright__ = "Copyright (c) 2024 Mohammed Shehab"
 __credits__ = ["Mohammed Shehab", "Safwan Omari", "Yaser Jararweh"]
 __license__ = "MIT License"
 __version__ = "1.0.0"
 __maintainer__ = "Mohammed Shehab"
 __email__ = "shihab@live.cn"
 __status__ = "Development"
"""

import time

import requests

from modules.DataHandler import DataHandler
from modules.System_logging import setup_project_logger
from modules.configuration import project_name

log = setup_project_logger(project_name)


class VulnerabilityFetcher:
    def __init__(self, keyword, api_key=None, severity=None):
        if api_key == "ADD_YOUR_NVD_API_KEY":
            raise ValueError("Please configure the NVD API key in the configuration file. See page: "
                             "https://nvd.nist.gov/developers/request-an-api-key")
        self.keyword = keyword
        self.api_key = api_key
        self.severity = severity
        self.base_url = "https://services.nvd.nist.gov/rest/json/cves/2.0"
        self.data_handler = DataHandler()

    def fetch_all(self):
        start_index = 0
        max_results = 2000
        headers = {'apiKey': self.api_key} if self.api_key else {}
        all_vulnerabilities = []

        while True:
            params = {
                'keywordSearch': self.keyword,
                'resultsPerPage': max_results,
                'startIndex': start_index
            }
            if self.severity:
                params['cvssV3Severity'] = self.severity

            try:
                response = requests.get(self.base_url, headers=headers, params=params)
                response.raise_for_status()
                data = response.json()
                vulnerabilities = data.get('vulnerabilities', [])

                if not vulnerabilities:
                    break

                all_vulnerabilities.extend([
                    {
                        'CVE_ID': vuln['cve']['id'],
                        'Description': vuln['cve']['descriptions'][0]['value'],
                        'Published_Date': vuln['cve']['published'],
                        'Severity': vuln.get('cve', {}).get('metrics', {}).get('cvssMetricV31', [{}])[0].get(
                            'cvssData', {}).get('baseSeverity', 'N/A')
                    }
                    for vuln in vulnerabilities
                ])
                start_index += max_results
                time.sleep(6)
            except requests.exceptions.RequestException as e:
                print(f"Error fetching vulnerabilities: {e}")
                log.error(f"Error fetching vulnerabilities: {e}")
                break

        self.data_handler.save_to_json(self.keyword, all_vulnerabilities)
        # self.save_to_file(all_vulnerabilities)
        return all_vulnerabilities

    # def save_to_file(self, data):
    #     os.makedirs(self.keyword, exist_ok=True)
    #     file_path = os.path.join(self.keyword, f"{self.keyword}_vulnerabilities.json")
    #     with open(file_path, 'w') as json_file:
    #         json.dump(data, json_file, indent=4)
    #     log.info(f"Vulnerabilities saved to {file_path}")
